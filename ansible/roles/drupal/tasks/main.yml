---

### Drupal ###

- name: Ensure Drupal packages
  action: apt pkg="{{ item }}" state=latest
  with_items:
    - php5-pgsql
    - php5-gd
    - php5-fpm
    - php5-cli
    - php5
  tags:
  - packages
  - drupal

- name: Fetch drush package
  get_url: url="https://github.com/drush-ops/drush/archive/6.x.zip" dest="{{ cache_path }}/drush-6.x.zip"
  tags:
  - drupal

- name: Unpack drush
  command: unzip "{{ cache_path }}/drush-6.x.zip" chdir="{{ server_path }}" creates="{{ server_path }}/drush-6.x"
  tags:
  - drupal

- name: Setup drush binary link
  file: path="/usr/local/bin/drush" src="{{ server_path }}/drush-6.x/drush" state=link
  tags:
  - drupal

- name: Set PHP pathinfo
  ini_file: dest=/etc/php5/fpm/php.ini section=PHP option=cgi.fix_pathinfo value=0
  tags:
  - drupal

- name: Set PHP socket (listen)
  ini_file: dest=/etc/php5/fpm/pool.d/www.conf section=www option=listen value=/tmp/phpfpm.socket
  tags:
  - drupal

# required by drush
- name: Create root pgpass
  template: src=pgpass.j2 dest=/root/.pgpass mode=0600 owner=root group=root
  tags:
  - drupal

- name: Create Drupal install script
  template: src=install-drupal.sh.j2 dest="{{ cache_path }}/install-drupal.sh" mode=0700 owner=root group=root
  register: drupal_script
  tags:
  - drupal

- name: Setup Drupal Postgresql user
  sudo_user: postgres
  postgresql_user: user="{{ drupal_database_username }}" password="{{ drupal_database_password }}"
  when: drupal_script|changed
  tags:
  - drupal

- name: Install drupal
  command: ./install-drupal.sh chdir="{{ cache_path }}"
  when: drupal_script|changed
  tags:
  - drupal

- name: Set robots.txt
  copy: src="robots.txt" dest="{{ drupal_root }}/robots.txt"
  tags:
  - drupal

- name: Copy default favicon.ico
  copy: src="favicon.ico" dest="{{ drupal_root }}/favicon.ico"
  tags:
  - drupal

- name: Setup drushrc
  copy: src=drushrc.php dest="{{ drupal_root }}/sites/default/drushrc.php" owner=root group=root mode=0644
  tags:
  - drupal

- name: Download Drupal drush tools
  command: drush dl -y "{{ item }}" chdir="{{ drupal_root }}" creates="{{ ansible_env.HOME }}/.drush/{{ item }}/"
  with_items:
    - drush_extras
    - drush_language
  tags:
  - drupal

- name: Download Drupal modules
  command: drush dl -y "{{ item }}" chdir="{{ drupal_root }}" creates="{{ drupal_root }}/sites/all/modules/{{ item }}/"
  register: download_modules
  with_items:
    - custom_username_validation
    - views
    - features
    - jquery_update

    - node_export
    - menu_block
    - menu_import
    - libraries
    - services
    - services_menu

    - i18n
    - pathauto
    - token
    - transliteration
    - variable
    - ctools
    - i18nviews
    - l10n_update
    - admin_language
    - wysiwyg
    - drush_editor
    - features_extra
    - imce
    - imce_wysiwyg
    - google_analytics
  tags:
  - drupal

- name: Enable Drupal modules
  command: drush en -y "{{ item }}" chdir="{{ drupal_root }}"
  when: download_modules|changed
  with_items:
    - custom_username_validation
    - views
    - features
    - jquery_update

    - node_export
    - menu_block
    - menu_block_export
    - menu_import
    - libraries
    - services
    - services_menu
    - rest_server

    - locale
    - i18n
    - i18n_node
    - i18n_block
    - i18n_menu

    - pathauto
    - tokenvariables
    - transliteration
    - variable
    - ctools
    - i18nviews
    - l10n_update
    - admin_language
    - wysiwyg
    - drush_editor
    - fe_block
    - imce
    - imce_wysiwyg
    - googleanalytics
  tags:
  - drupal

- name: Download ckeditor
  command: drush editor-download {{ item }} chdir="{{ drupal_root }}" creates="{{ drupal_root }}/sites/all/libraries/{{ item }}"
  with_items:
    - ckeditor
  tags:
  - drupal

- name: Install wysiwyg module
  shell: rm -rf "{{ drupal_root }}/sites/all/modules/ytp_wysiwyg" && cp -r "{{ cache_path }}/ytp-drupal-wysiwyg" "{{ drupal_root }}/sites/all/modules/ytp_wysiwyg"
  register: install_wysiwyg
  tags:
  - drupal

- name: Enable wysiwyg module
  command: drush en -y ytp_wysiwyg chdir="{{ drupal_root }}"
  when: install_wysiwyg|changed
  tags:
  - drupal

- name: InstallYTP user module
  shell: rm -rf "{{ drupal_root }}/sites/all/modules/ytp-drupal-user" && cp -r "{{ cache_path }}/ytp-drupal-user" "{{ drupal_root }}/sites/all/modules/ytp_user"
  register: install_ytp_drupal_user
  tags:
  - drupal

- name: Enable ytpdrupaltools module
  command: drush en -y ytp_user chdir="{{ drupal_root }}"
  when: iinstall_ytp_drupal_user|changed
  tags:
  - drupal

- include: theme.yml

- include: features.yml

- name: Set default Drupal language
  command: drush language-default fi chdir="{{ drupal_root }}"
  tags:
  - drupal-configuration
  - drupal

- name: Copy drush variable import script
  copy: src=multiple-variables.drush dest="{{ scripts_path }}/multiple-variables.drush" owner=root group=root mode=0750
  tags:
  - drupal-configuration
  - drupal

- name: Copy drush variables
  copy: src=drupal.json dest="{{ cache_path }}/drupal.json" owner=root group=root mode=0600
  register: drush_variables
  tags:
  - drupal-configuration
  - drupal

- name: Set Drupal variables from file
  command: "'{{ scripts_path }}/multiple-variables.drush' '{{ cache_path }}/drupal.json' chdir='{{ drupal_root }}'"
  when: drush_variables|changed
  tags:
  - drupal-configuration
  - drupal

- name: Set Drupal variables
  command: drush vset "{{ item.variable }}" "{{ item.value }}" chdir='{{ drupal_root }}'
  with_items:
    - { variable: "site_mail", value: "{{ email_from }}" }
    - { variable: "site_name", value: "{{ drupal_site_name }}" }
    - { variable: "date_format_short", value: 'd.m.Y - H:i'}
  tags:
  - drupal-configuration
  - drupal

- name: Enable email verification
  command: drush vset "user_email_verification" "1" chdir='{{ drupal_root }}'
  when: enable_email_verification != False
  tags:
  - drupal-configuration
  - drupal

- name: Set Drupal remote variables
  command: drush vset "{{ item.variable }}" "{{ item.value }}" chdir='{{ drupal_root }}'
  with_items:
    - { variable: "googleanalytics_account", value: "{{ google_analytics.id }}" }
  tags:
  - drupal-configuration
  - drupal
  - non-local

- name: Copy fix scripts
  copy: src={{ item }}.drush dest={{ scripts_path }}/{{ item }}.drush owner=root group=root mode=750
  register: copy_fix_scripts
  with_items:
    - fix_language
  tags:
  - drupal-configuration
  - drupal

- name: Apply fix scripts
  command: "'{{ scripts_path }}/{{ item }}.drush' chdir='{{ drupal_root }}'"
  when: copy_fix_scripts|changed
  with_items:
    - fix_language
  tags:
  - drupal-configuration
  - drupal

- name: Move blocks
  command: drush block-configure --module={{ item.module }} --delta={{ item.delta }} --region={{ item.region }} chdir="{{ drupal_root }}"
  with_items:
    - { module: views, delta: service_alerts_view-block, region: highlighted }
    - { module: locale, delta: language, region: top_navigation }

- name: Disable blocks
  command: drush block-disable --module={{ item.module }} --delta={{ item.delta }} chdir="{{ drupal_root }}"
  with_items:
    - { module: user, delta: login }
    - { module: system, delta: "powered-by" }
    - { module: node, delta: "recent" }
  tags:
  - drupal-configuration
  - drupal

- include: translations.yml

- name: Ensure PHP-FPM is restarted
  service: name=php5-fpm state=restarted
  tags:
  - drupal

- include: roles.yml

- name: Add default editor user
  command: drush user-create "{{ drupal_default_editor_username }}" --mail="{{ drupal_default_editor_email }}" --password="{{ drupal_default_editor_password }}" chdir="{{ drupal_root }}"
  ignore_errors: True
  tags:
  - drupal

- name: Set user roles
  command: drush user-add-role "{{ item.role }}" --name="{{ item.username }}" chdir="{{ drupal_root }}"
  with_items:
  - { username: "{{ drupal_default_editor_username }}", role: "{{ drupal_editor_rolename }}" }
  - { username: "{{ drupal_default_editor_username }}", role: "{{ drupal_ckan_admin_rolename }}" }
  - { username: "{{ drupal_admin_username }}", role: "{{ drupal_ckan_admin_rolename }}" }
  tags:
  - drupal

- name: Copy custom cancel script
  copy: src="{{ item }}" dest="{{ drupal_root }}/{{ item }}" owner="root" group="root" mode="0644"
  with_items:
    - "cancel-user.php"
  tags:
  - drupal

- name: Copy imce scripts
  copy: src="../modules/ytp-drupal-wysiwyg/imce_set_for_roles.drush" dest="{{ scripts_path }}/imce_set_for_roles.drush" owner=root group=root mode=750
  register: copy_imce_scripts
  tags:
  - drupal

- name: Apply imce scripts
  command: "'{{ scripts_path }}/imce_set_for_roles.drush' '{{ drupal_editor_rolename }}' chdir='{{ drupal_root }}'"
  when: copy_imce_scripts|changed
  tags:
  - drupal

- name: Create upload paths
  file: path={{ drupal_upload_path }}/{{ item }} owner={{ www_user }} group={{ www_group }} mode=0775 state="directory"
  register: create_upload_paths
  with_items:
    - ""
    - styles
    - images
    - documents
  tags:
  - drupal

- name: Ensure correct permission for Drupal upload directory
  shell: chown -R "{{ www_user }}:{{ www_group }}" "{{ drupal_upload_path }}"
  when: create_upload_paths|changed
  tags:
  - drupal

- name: Update Drupal
  command: drush -y --backup-dir="{{ backup_path }}" up chdir="{{ drupal_root }}"
  tags:
  - drupal

- name: Clear Drupal cache
  command: drush cache-clear all -y chdir="{{ drupal_root }}"
  tags:
  - drupal

